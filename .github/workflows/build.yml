name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Linux (CMake), os: ubuntu-latest, shell: sh, flags: true }

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libxext-dev mesa-common-dev build-essential git make autoconf automake libtool \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev \
            python3
      - uses: mymindstorm/setup-emsdk@v10
        with:
          version: 2.0.27
      - name: Setup gl3w
        if: runner.os == 'Linux'
        run: |
          python ./harpia/third_party/gl3w/gl3w_gen.py
      - name: Configure CMake
        run: |
          emcmake cmake -S . -B build \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build
        run: cmake --build build/ --verbose
      - name: Print Build Logs
        if: always()
        run: |
          if test -f "/home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeOutput.log"; then
              echo "=== cat /home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeOutput.log"
              cat /home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeOutput.log
          fi
          if test -f "/home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeError.log"; then
              echo "=== cat /home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeError.log"
              cat /home/runner/work/harpia-game-engine/harpia-game-engine/build/CMakeFiles/CMakeError.log
          fi